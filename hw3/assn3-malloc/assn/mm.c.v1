/*
 * This implementation replicates the implicit list implementation
 * provided in the textbook
 * "Computer Systems - A Programmer's Perspective"
 * Blocks are never coalesced or reused.
 * Realloc is implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>

#include "mm.h"
#include "memlib.h"

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "Naif_and_Jordan",
    /* First member's full name */
    "Naif Tarafdar",
    /* First member's email address */
    "naif.tarafdar@mail.utoronto.ca",
    /* Second member's full name (leave blank if none) */
    "Jordan Zannier",
    /* Second member's email address (leave blank if none) */
    "jordan.zannier@mail.utoronto.ca"
};

/*************************************************************************
 * Basic Constants and Macros
 * You are not required to use these macros but may find them helpful.
*************************************************************************/
#define WSIZE       sizeof(void *)         /* word size (bytes) */
#define DSIZE       (2 * WSIZE)            /* doubleword size (bytes) */
#define CHUNKSIZE   (1<<7)      /* initial heap size (bytes) */
#define OVERHEAD    DSIZE     /* overhead of header and footer (bytes) */

#define MAX(x,y) ((x) > (y)?(x) :(y))

/* Pack a size and allocated bit into a word */
#define PACK(size, alloc) ((size) | (alloc))

/* Read and write a word at address p */
#define GET(p)          (*(uintptr_t *)(p))
#define PUT(p,val)      (*(uintptr_t *)(p) = (val))

/* Read the size and allocated fields from address p */
#define GET_SIZE(p)     (GET(p) & ~(DSIZE - 1))
#define GET_ALLOC(p)    (GET(p) & 0x1)

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp)        ((char *)(bp) - WSIZE)
#define FTRP(bp)        ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

/* Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))


#define SET_NEXT_FREE_BLKP(bp, val) (PUT(bp,val))
#define SET_PREV_FREE_BLKP(bp, val) (PUT((char *)(bp)+WSIZE, val))

#define GET_NEXT_FREE_BLKP(bp) (GET(bp))
#define GET_PREV_FREE_BLKP(bp) (GET((char *)(bp) + WSIZE))

#define RETURN_FREE_LIST_POINTER(fp,i) ((char **)fp + i*WSIZE)

#define LIST_4_TO_7(fp) (RETURN_FREE_LIST_POINTER(fp,0))
#define LIST_8_TO_15(fp) (RETURN_FREE_LIST_POINTER(fp,1))
#define LIST_16_TO_31(fp) (RETURN_FREE_LIST_POINTER(fp,2))
#define LIST_32_TO_63(fp) (RETURN_FREE_LIST_POINTER(fp,3))
#define LIST_64_TO_127(fp) (RETURN_FREE_LIST_POINTER(fp,4))
#define LIST_128_TO_255(fp) (RETURN_FREE_LIST_POINTER(fp,5))
#define LIST_256_TO_511(fp) (RETURN_FREE_LIST_POINTER(fp,6))
#define LIST_512_TO_1023(fp) (RETURN_FREE_LIST_POINTER(fp,7))
#define LIST_1024_TO_2047(fp) (RETURN_FREE_LIST_POINTER(fp,8))
#define LIST_2048_TO_4095(fp) (RETURN_FREE_LIST_POINTER(fp,9))
#define LIST_4096_TO_8191(fp) (RETURN_FREE_LIST_POINTER(fp,10))
#define LIST_8192_TO_16383(fp) (RETURN_FREE_LIST_POINTER(fp,11))
#define LIST_16384_TO_32767(fp) (RETURN_FREE_LIST_POINTER(fp,12))
#define LIST_32768_TO_65535(fp) (RETURN_FREE_LIST_POINTER(fp,13))
#define LIST_65536_TO_INF(fp) (RETURN_FREE_LIST_POINTER(fp,14))



/* alignment */
#define ALIGNMENT 16
/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0xf)

void* heap_listp = NULL;
void** free_listp = NULL;

/**********************************************************
 * mm_init
 * Initialize the heap, including "allocation" of the
 * prologue and epilogue
 **********************************************************/
 int mm_init(void)
 {
   if ((heap_listp = mem_sbrk(16*WSIZE)) == (void *)-1)
         return -1;
  
   free_listp=(void**)heap_listp; 
   //allocate 15 explicit free list pointers and one block for the header of the first block 
   // (want to make sure first addr returned is DSIZE aligned)
   //initialize all free lists to null
  
   char * fp;
   //PUT(heap_listp, NULL); 
   //USE THE PUT MACRO FOR THIS
   PUT(LIST_4_TO_7(fp), 0);
   PUT(LIST_8_TO_15(free_listp), 0);
   PUT(LIST_16_TO_31(free_listp),  0);
   PUT(LIST_32_TO_63(free_listp),  0);
   PUT(LIST_64_TO_127(free_listp), 0);
   PUT(LIST_128_TO_255(free_listp), 0);
   PUT(LIST_256_TO_511(free_listp),  0);
   PUT(LIST_512_TO_1023(free_listp), 0);
   PUT(LIST_1024_TO_2047(free_listp), 0);
   PUT(LIST_2048_TO_4095(free_listp), 0);
   PUT(LIST_4096_TO_8191(free_listp), 0);
   PUT(LIST_8192_TO_16383(free_listp), 0);
   PUT(LIST_16384_TO_32767(free_listp), 0);
   PUT(LIST_32768_TO_65535(free_listp), 0);
   PUT(LIST_65536_TO_INF(free_listp), 0);
     
    PUT(heap_listp, 0);                         // alignment padding
     heap_listp += 4*DSIZE;

     return 0;
 }

/************************************************
 *find_free
 *goes through the free list and finds a spot to put the 
 *new free block (pointed to by bp) in appropriate address order
 *to reduce fragmentation
 ************************************************/

//void *find_free(void *bp){
//   void *p
//   void *prev;
//   prev=free_listp;
//   for(p=free_listp; NEXT_FREE_BLOCK(p)!=NULL; p=NEXT_FREE_BLOCK(p)){
//	if(p>=bp) break;
//   }
//   return p;
//
//}

/**********************************************************
 * coalesce
 * Covers the 4 cases discussed in the text:
 * - both neighbours are allocated
 * - the next block is available for coalescing
 * - the previous block is available for coalescing
 * - both neighbours are available for coalescing
 **********************************************************/

void *coalesce(void *bp)
{
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if (prev_alloc && next_alloc) {       /* Case 1 */
        return bp;
    }

    else if (prev_alloc && !next_alloc) { /* Case 2 */
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));
        return (bp);
    }

    else if (!prev_alloc && next_alloc) { /* Case 3 */
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        return (PREV_BLKP(bp));
    }

    else {            /* Case 4 */
        size += GET_SIZE(HDRP(PREV_BLKP(bp)))  +
            GET_SIZE(FTRP(NEXT_BLKP(bp)))  ;
        PUT(HDRP(PREV_BLKP(bp)), PACK(size,0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size,0));
        return (PREV_BLKP(bp));
    }
}

/**********************************************************
 * extend_heap
 * Extend the heap by "words" words, maintaining alignment
 * requirements of course. Free the former epilogue block
 * and reallocate its new header
 **********************************************************/
void *extend_heap(size_t words)
{
    char *bp;
    size_t size;

    /* Allocate an even number of words to maintain alignments */
    size = (words % 2) ? (words+1) * WSIZE : words * WSIZE;
    if ( (bp = mem_sbrk(size)) == (void *)-1 )
        return NULL;

    /* Initialize free block header/footer and the epilogue header */
    PUT(HDRP(bp), PACK(size, 0));                // free block header
    PUT(FTRP(bp), PACK(size, 0));                // free block footer
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));        // new epilogue header

    /* Coalesce if the previous block was free */
    //return coalesce(bp);
    return bp;
}


char ** find_list(size_t asize){
    char **bp;

    if(asize>=65536) bp= LIST_65536_TO_INF(free_listp);
    else if(asize>=32768) bp= LIST_32768_TO_65535(free_listp);
    else if(asize>=16384) bp= LIST_16384_TO_32767(free_listp);
    else if(asize>=8192) bp= LIST_8192_TO_16383(free_listp);
    else if(asize>=4096) bp= LIST_4096_TO_8191(free_listp);
    else if(asize>=2048) bp= LIST_2048_TO_4095(free_listp);
    else if(asize>=1024) bp= LIST_1024_TO_2047(free_listp);
    else if(asize>=512) bp= LIST_512_TO_1023(free_listp);
    else if(asize>=256) bp= LIST_256_TO_511(free_listp);
    else if(asize>=128) bp= LIST_128_TO_255(free_listp);
    else if(asize>=64) bp= LIST_64_TO_127(free_listp);
    else if(asize>=32) bp= LIST_32_TO_63(free_listp);
    else if(asize>=16) bp= LIST_16_TO_31(free_listp);
    else if(asize>=8) bp= LIST_8_TO_15(free_listp);
    else bp= LIST_4_TO_7(free_listp);

    return bp;
 }

/**********************************************************
 * find_fit
 * Traverse the heap searching for a block to fit asize
 * Return NULL if no free blocks can handle that size
 * Assumed that asize is aligned
 **********************************************************/
void * find_fit(size_t asize)
{
    void *bp;


    //currently not looking at larger lists if can't fit in smaller list, can change that to improve throughput
    void *prev;
    bp = GET(find_list(asize));
    prev = bp;    
    for (; bp!=0; bp = GET_NEXT_FREE_BLKP(bp))
    {
        if (!GET_ALLOC(HDRP(prev)) && (asize <= GET_SIZE(HDRP(prev))))
        {
            return bp;
        }
        prev=bp;

    }
    return NULL;
}

/**********************************************************
 * place
 * Mark the block as allocated
 **********************************************************/
void place(void* bp, size_t asize)
{
  /* Get the current block size */
  size_t bsize = GET_SIZE(HDRP(bp));

  PUT(HDRP(bp), PACK(bsize, 1));
  PUT(FTRP(bp), PACK(bsize, 1));


  //REMOVE FROM FREE LIST
}

/**********************************************************
 * mm_free
 * Free the block and coalesce with neighbouring blocks
 **********************************************************/
void mm_free(void *bp)
{
    
    
    if(bp == NULL){
      return;
    }
    
    size_t size = GET_SIZE(HDRP(bp));
    PUT(HDRP(bp), PACK(size,0));
    PUT(FTRP(bp), PACK(size,0));


    //coalesce(bp);

    //at this point the block is coalesced and ready to be added to a free list
    //get size again after coalescing
    //size = GET_SIZE(HDRP(bp));
    
    //ADD TO FREE LISTi
    //Check free lists in order of size
    //PREV_FREE_BLKP(bp) = NULL;
    
    char **list = find_list(size);
    //new bloclk next pointer point to the head of the list
    SET_NEXT_FREE_BLKP(bp,*(list));

    if(*(list) != NULL) 
        SET_PREV_FREE_BLKP(*(list),bp);
    
    //have the list pointer point to the new free block
    *(list) = bp; 


 
   // void *p=find_free(bp);  //gets the free block that will come after this free block
   // void *tmp_prev = PREV_FREE_BLKP(p); //stores the free block that will be before this free block
   // PREV_FREE_BLKP(p) = bp; //set's the previous pointer of the subsequent block to point to current block
   // PREV_FREE_BLKP(bp) = temp_prev; //set's the previous pointer of current block to point to the previous block
   // NEXT_FREE_BLKP(temp_prev)=bp; //set's the next pointer of the previous block to point to current block
   // NEXT_FREE_BLKP(bp) = p; //set's the next pointer of the current block to point to the next block
    
}


/**********************************************************
 * mm_malloc
 * Allocate a block of size bytes.
 * The type of search is determined by find_fit
 * The decision of splitting the block, or not is determined
 *   in place(..)
 * If no block satisfies the request, the heap is extended
 **********************************************************/
void *mm_malloc(size_t size)
{
    size_t asize; /* adjusted block size */
    size_t extendsize; /* amount to extend heap if no fit */
    char * bp;

    /* Ignore spurious requests */
    if (size == 0)
        return NULL;

    /* Adjust block size to include overhead and alignment reqs. */
    if (size <= DSIZE)
        asize = DSIZE + OVERHEAD;
    else
        asize = DSIZE * ((size + (OVERHEAD) + (DSIZE-1))/ DSIZE);

    /* Search the free list for a fit */
    if ((bp = find_fit(asize)) != NULL) {
        place(bp, asize);
        return bp;
    }

    /* No fit found. Get more memory and place the block */
    extendsize = MAX(asize, CHUNKSIZE);
    if ((bp = extend_heap(extendsize/WSIZE)) == NULL)
        return NULL;
    place(bp, asize);
    return bp;

}
/**********************************************************
 * mm_realloc
 * Implemented simply in terms of mm_malloc and mm_free
 *********************************************************/
void *mm_realloc(void *ptr, size_t size)
{
    /* If size == 0 then this is just free, and we return NULL. */
    if (size == 0){
      mm_free(ptr);
      return NULL;
    }

    /* If old ptr is NULL, then this is just malloc. */
    if (ptr == NULL)
      return (mm_malloc(size));

    void *oldptr = ptr;
    void *newptr;
    size_t copySize;

    newptr = mm_malloc(size);
    if (newptr == NULL)
      return NULL;

    /* Copy the old data. */
    copySize = GET_SIZE(HDRP(oldptr));
    if (size < copySize)
      copySize = size;
    memcpy(newptr, oldptr, copySize);
    mm_free(oldptr);
    return newptr;
}

/**********************************************************
 * mm_check
 * Check the consistency of the memory heap
 * Return nonzero if the heap is consistant.
 *********************************************************/
int mm_check(void){
  return 1;
}
